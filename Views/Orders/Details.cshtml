@model BookStoreMVC.Models.Order

@{

    ViewData["Title"] = "Order Details";

}

<div class="row g-4">

    <div class="col-lg-8">

        <div class="card p-4 mb-4">

            <h3 class="mb-3">Order #@Model.Id</h3>

            <p class="text-muted mb-2">Placed on @Model.OrderDate.ToString("yyyy-MM-dd HH:mm")</p>



            @* --- MODIFIED STATUS DISPLAY --- *@

            <p class="text-muted mb-2">

                Status:

                <span class="badge @GetBadgeClass(Model.Status)">

                    @Model.Status.ToString().Replace("_", " ")

                </span>

            </p>



            <p class="text-muted mb-2">Total Amount: <strong>₹@Model.TotalAmount.ToString("0.00")</strong></p>

            <p class="text-muted mb-2">Shipping To: <strong>@Model.ShippingName</strong></p>

            <p class="text-muted mb-2">Address: @Model.ShippingAddress, @Model.ShippingCity, @Model.ShippingState, @Model.ShippingZip</p>

            <p class="text-muted mb-2">Phone: @Model.Phone</p>

            <p class="text-muted mb-2">Payment Method: @Model.Payment?.PaymentMethod</p>

            <p class="text-muted">Payment Status: @Model.Payment?.PaymentStatus</p>

        </div>

        <div class="row row-cols-1 row-cols-md-2 g-3">

            @foreach (var item in Model.OrderItems)

            {

                <div class="col">

                    <div class="card h-100 p-3">

                        <div class="d-flex align-items-center gap-3">

                            <img src="@(string.IsNullOrWhiteSpace(item.Book?.ImageUrl) ? Url.Content("~/images/default-book.png") : item.Book!.ImageUrl)" alt="@item.Book?.Title" style="width:64px;height:90px;object-fit:cover;border-radius:8px;" />

                            <div>

                                <h6 class="mb-1">@item.Book?.Title</h6>

                                <small class="text-muted">Qty: @item.Quantity</small>

                            </div>

                        </div>

                        <div class="mt-3 d-flex justify-content-between">

                            <span class="text-muted">Price</span>

                            <span>₹@item.UnitPrice.ToString("0.00")</span>

                        </div>

                        <div class="d-flex justify-content-between">

                            <span class="text-muted">Subtotal</span>

                            <span>₹@((item.UnitPrice * item.Quantity).ToString("0.00"))</span>

                        </div>

                    </div>

                </div>

            }

        </div>

    </div>

    <div class="col-lg-4">

        @if (User.IsInRole("ADMIN"))

        {

            <div class="card p-4">

                <h4 class="mb-3">Customer</h4>

                <p class="mb-1"><strong>@Model.User?.Username</strong></p>

                <p class="text-muted">@Model.User?.Email</p>

                <hr />

                <h5>Update Order Status</h5>

                <form asp-action="UpdateStatus" method="post">

                    <input type="hidden" name="id" value="@Model.Id" />

                    <div class="input-group mb-3" style="max-width: 300px;">

                        <select class="form-select" name="status">

                            @foreach (var status in Enum.GetValues(typeof(BookStoreMVC.Models.OrderStatus)))

                            {

                                if (status.Equals(Model.Status))

                                {

                                    <option value="@status" selected>@status</option>

                                }

                                else

                                {

                                    <option value="@status">@status</option>

                                }

                            }

                        </select>

                        <button type="submit" class="btn btn-primary">Update</button>

                    </div>

                </form>

            </div>

        }



        @if (!User.IsInRole("ADMIN"))

        {

            <div class="card p-4 mt-3">

                @if (Model.Status == OrderStatus.DELIVERED)

                {

                    <form asp-action="RequestReturn" method="post" class="d-grid gap-2">

                        @Html.AntiForgeryToken()

                        <input type="hidden" name="id" value="@Model.Id" />

                        <button type="submit" class="btn btn-outline-primary">Request Return</button>

                    </form>

                }

                else if (Model.Status == OrderStatus.PENDING || Model.Status == OrderStatus.SHIPPED)

                {

                    <form asp-action="Cancel" method="post" class="d-grid gap-2">

                        @Html.AntiForgeryToken()

                        <input type="hidden" name="id" value="@Model.Id" />

                        <button type="submit" class="btn btn-outline-danger">Cancel the Order</button>

                    </form>

                }

                else if (Model.Status == OrderStatus.CANCELLED)

                {

                    <span class="text-danger">This order has been cancelled.</span>

                }

                else if (Model.Status == OrderStatus.RETURN_REQUESTED)

                {

                    <span class="text-warning">Return requested. We’ll process your return soon.</span>

                }

                else if (Model.Status == OrderStatus.RETURN_SHIPPED)

                {

                    <span class="text-info">Return shipment is on the way.</span>

                }

                else if (Model.Status == OrderStatus.RETURN_DELIVERED)

                {

                    <span class="text-success">Return completed and delivered.</span>

                }

            </div>

        }

    </div>

</div>



@functions {

    // Helper to get badge classes for order status

    private string GetBadgeClass(BookStoreMVC.Models.OrderStatus status)

    {

        // --- MODIFIED TO USE BOOTSTRAP 5 CLASSES ---

        return status switch

        {

            OrderStatus.PENDING => "text-bg-warning",

            OrderStatus.SHIPPED => "text-bg-info",

            OrderStatus.DELIVERED => "text-bg-success",

            OrderStatus.CANCELLED => "text-bg-danger",

            OrderStatus.RETURN_REQUESTED => "text-bg-warning",

            OrderStatus.RETURN_SHIPPED => "text-bg-info",

            OrderStatus.RETURN_DELIVERED => "text-bg-success",

            _ => "text-bg-secondary"

        };

    }

}