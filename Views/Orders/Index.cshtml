@model IEnumerable<BookStoreMVC.Models.Order>
@{
    ViewData["Title"] = User.IsInRole("ADMIN") ? "Manage Orders" : "My Orders";
    bool isAdmin = User.IsInRole("ADMIN");
}

<h2 class="mb-3">@ViewData["Title"]</h2>


@if (!Model.Any())
{
    <div class="alert alert-info">No orders yet.</div>
}
else
{
    @if (isAdmin)
    {
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
        string FormatStatus(string status)
        {
            // Replace underscores with spaces (e.g., "RETURN_REQUESTED" -> "RETURN REQUESTED")
            var withSpaces = status.Replace("_", " ");
            // Change to "Title Case" so the first letter of each word is capitalized (e.g., "return requested" -> "Return Requested")
            return System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(withSpaces.ToLower());
        }
        string GetStatusColorClass(string status)
        {
            return status switch
            {
                "PENDING" => "text-warning",
                "SHIPPED" => "text-info",
                "DELIVERED" => "text-success",
                "CANCELLED" => "text-danger",
                "RETURN_REQUESTED" => "text-warning",
                "RETURN_SHIPPED" => "text-info",
                "RETURN_DELIVERED" => "text-success",
                _ => "text-secondary" // Default color for other statuses
            };
        }
        // Admin table view remains unchanged
        <div class="table-responsive card p-2 p-md-3 product-card">
            <table class="table align-middle mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Order</th>
                        <th>User</th>
                        <th class="text-center">Items</th>
                        <th class="text-end">Total</th>
                        <th class="text-center">Status</th>
                        <th class="text-end">Placed</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var o in Model.OrderByDescending(o => o.OrderDate))
                    {
                        <tr>
                            <td><strong>#@o.Id</strong></td>
                            <td>@o.User?.Username</td>
                            <td class="text-center">@o.OrderItems.Count</td>
                            <td class="text-end">₹@o.TotalAmount.ToString("0.00")</td>
                            <td class="text-center">
                                <span class="@GetStatusColorClass(o.Status.ToString())">
                                    @FormatStatus(o.Status.ToString())
                                </span>
                            </td>
                            <td class="text-end">@o.OrderDate.ToString("yyyy-MM-dd")</td>
                            <td class="text-end">
                                <a class="btn btn-outline-primary btn-sm btn-rounded" asp-action="Details" asp-route-id="@o.Id">View</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        // Customer card view
        <div class="vstack gap-3">
            @foreach (var o in Model.OrderByDescending(o => o.OrderDate))
            {
                <div class="card p-3 shadow-sm">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <div class="fw-bold">Order #@o.Id</div>
                            <small class="text-muted">@o.OrderDate.ToString("yyyy-MM-dd")</small>
                        </div>
                        <span class="badge @(o.Status == OrderStatus.PENDING ? "text-warning" :
                                                                                                                                   o.Status == OrderStatus.SHIPPED ? "text-info" :
                                                                                                                                   o.Status == OrderStatus.DELIVERED ? "text-success" :
                                                                                                                                   o.Status == OrderStatus.CANCELLED ? "text-danger" :
                                                                                                                                   o.Status == OrderStatus.RETURN_REQUESTED ? "text-warning" :
                                                                                                                                   o.Status == OrderStatus.RETURN_SHIPPED ? "text-info" :
                                                                                                                                   o.Status == OrderStatus.RETURN_DELIVERED ? "text-success" :
                                                                                                                                   "text-secondary")">
                @o.Status.ToString().Replace("_", " ")
            </span>
        </div>
        <div class="row g-2 mt-2">
            @foreach (var it in o.OrderItems)
                        {
                            <div class="col-12 col-md-6 col-lg-4">
                                <div class="d-flex align-items-center gap-2 border rounded p-2">
                                    <img src="@(string.IsNullOrWhiteSpace(it.Book!.ImageUrl) ? Url.Content("~/images/default-book.png") : it.Book.ImageUrl)" style="width:48px;height:64px;object-fit:cover" class="rounded" />
                                    <div class="small">
                                        <div class="fw-semibold text-truncate">@it.Book.Title</div>
                                        <div class="text-muted">x @it.Quantity • ₹@it.UnitPrice.ToString("0.00")</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-3 pt-2 border-top">
                        <div class="fw-bold">Total: ₹@o.TotalAmount.ToString("0.00")</div>
                        <div class="d-flex gap-2">
                            @if (o.Status == OrderStatus.DELIVERED)
                            {
                                @* --- REPLACED SIMPLE FORM WITH NEW MODAL LOGIC --- *@
                                <form asp-action="RequestReturn" method="post" class="d-inline d-none" id="returnForm-@o.Id">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@o.Id" />
                                </form>
                                <button type="button" class="btn btn-sm btn-outline-primary js-return-button" data-order-id="@o.Id">
                                    Return the Order
                                </button>
                                <div class="small text-success mt-1 d-none" id="returnHint-@o.Id">
                                    Policy accepted. Click Return again.
                                </div>
                            }
                            else if (o.Status == OrderStatus.PENDING || o.Status == OrderStatus.SHIPPED)
                            {
                                <form asp-action="Cancel" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@o.Id" />
                                    <button type="submit" class="btn btn-sm btn-outline-danger">Cancel The Order</button>
                                </form>
                            }
                            <a class="btn btn-outline-primary btn-sm" asp-action="Details" asp-route-id="@o.Id">Details</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@* --- ADDED MODAL HTML (DEFINED ONCE OUTSIDE THE LOOP) --- *@
<div class="modal fade" id="returnPolicyModal" tabindex="-1" aria-labelledby="returnPolicyLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnPolicyLabel">Return & Replacement Policy</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="modalOrderId" value="" />
                <p class="mb-2">This return is available <strong>only for damaged books</strong> and must be requested <strong>within 1–2 days</strong> of delivery.</p>
                <ul class="mb-3">
                    <li>Provide photos of the damage if requested.</li>
                    <li>Include the invoice/packing slip in the package.</li>
                    <li>Pickup / return instructions will be shared after approval.</li>
                </ul>

                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="policyAckChk">
                    <label class="form-check-label" for="policyAckChk">
                        I confirm I’m returning due to damage and I’m within 1–2 days of delivery.
                    </label>
                </div>
                <div id="policyError" class="text-danger small mt-2 d-none">Please tick the confirmation to continue.</div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" id="confirmReturnPolicy" class="btn btn-primary">I Agree</button>
            </div>
        </div>
    </div>
</div>


@* --- ADDED SCRIPT SECTION FOR MODAL LOGIC --- *@
@section Scripts {
    <script>
        $(function () {
            // Handle click on any "Return the Order" button
            $('.js-return-button').on('click', function () {
                var orderId = $(this).data('order-id');
                var storageKey = 'returnPolicyAccepted:' + orderId;

                // Check if policy was already accepted for this order
                if (localStorage.getItem(storageKey) === 'true') {
                    $('#returnForm-' + orderId).submit();
                } else {
                    // If not accepted, show the policy modal
                    $('#modalOrderId').val(orderId); // Store the current order ID in the modal
                    $('#policyError').addClass('d-none');
                    $('#policyAckChk').prop('checked', false);
                    $('#returnPolicyModal').modal('show');
                }
            });

            // Handle click on "I Agree" button inside the modal
            $('#confirmReturnPolicy').on('click', function () {
                var orderId = $('#modalOrderId').val();
                var storageKey = 'returnPolicyAccepted:' + orderId;

                if (!$('#policyAckChk').is(':checked')) {
                    $('#policyError').removeClass('d-none');
                    return;
                }

                // If checkbox is ticked, save acceptance and close modal
                localStorage.setItem(storageKey, 'true');
                $('#returnPolicyModal').modal('hide');
                $('#returnHint-' + orderId).removeClass('d-none'); // Show hint text
            });
        });
    </script>
}